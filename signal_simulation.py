# Copyright (c) 2016, Diarmaid O Cualain; Marijn Stam
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.

# * Neither the name of ecg_simulation nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import matplotlib.pyplot as plt
import scipy.signal as signal
import scipy.fft as fourier
import scipy.linalg
import numpy as np
import neurokit2 as nk
from termcolor import colored
import sys
from random import seed
from random import randint
import pandas as pd

from filters import Filters
from signal_tools import SignalTools



sample_rate = 125   # sample rate, Hz

#NOTE
#The data in this CSV is sampled at a sample rate of 125Hz
#Respiratory rate in this data = 20/min
def importCSV(filename, num_of_breaths, plot=False):

    """
    Imports respiratory data from a CSV generated by the ProtoCentral app: https://github.com/Protocentral/ADS1292rShield_Breakout. 

    Parameters
    ----------
    filename : `string` \n
        Filename of the CSV file to be read
    num_of_breaths : `int` \n
        Number of respiratory cycles to be extracted from the CSV (1 = once in and out)
    plot : `Bool` \n
        Plot the raw data if True, defaults to False.

    Returns
    ----------
    result : `array_like`\n
        Array of size `num_breaths * 375` which holds normalized respiratory data (i.e. y-axis from 0 to 1.)

    Notes
    ----------
    This function is hard-coded to a sample rate of 125Hz and respiratory rate of 20 cycles per minute\n 
    This is the default data our patient monitor outputs. 
    """


    """
    Process CSV to read the raw values, modify "ECG" to column name which holds the data
    """
    data = pd.read_csv(filename)

    resp_data = data['ECG']
    np_resp = np.array(resp_data)


    """
    Normalize the CSV data to 0-1 over the y-axis
    """
    normalized_resp = np.zeros(len(np_resp))
    min_resp = min(np_resp)
    max_resp = max(np_resp)             

    for idx, value in enumerate(np_resp):
        normalized_resp[idx] = (np_resp[idx] - min_resp) / (max_resp - min_resp)

    """
    Plot the data and slice to amount of breaths. Note that these numbers are static with a sample rate of 125.
    """
    if(plot):
        plt.figure("CSV Data")
        plt.title("Raw data read from CSV")
        plt.xlabel("Sample")
        plt.ylabel("Normalized amplitude")
        plt.plot(normalized_resp)
        plt.show()
    result = normalized_resp[0:num_of_breaths*375]
    return result


def main():

    seed(1)
    num_of_breaths = 15
    capture_length = num_of_breaths * 3
    resp_data = importCSV(filename='real.csv', num_of_breaths=num_of_breaths, plot=True)
    num_samples = sample_rate * capture_length


    """
    Class instantiation
    Filters gives us access to several LTI or non-LTI filters. LTI filters can be IIR or FIR.
    SignalTools gives us extra tools like sine wave generation, FFT's, downsampling etc.
    """
    filterInterface = Filters(sample_rate, capture_length)
    signalInterface = SignalTools(sample_rate, capture_length)


    """
    Generation of sine waves
    """
    sine_respiratory = signalInterface.sine_generator(5)
    sine_mains = signalInterface.sine_generator(50, 0.1)
    sine_alias = signalInterface.sine_generator(50)




    """
    Add random (gaussian distributed) noise 
    1 in every 10 samples (statistically), 20 samples of noise are added. This simulates erradic movement.
    """
    # noise = np.random.normal(0, 0.2, num_samples)
    # for i, value in enumerate(nk_respiratory):
    #     if(randint(0,10) > 9):
    #         nk_respiratory[i:i+20:1] = value + noise[i:i+20:1]
    # 1 in every 10 samples (statistically), 20 samples of noise are added. This simulates erradic movement.



    """
    Input signals
    """
    # respiratory_noisy =  (nk_respiratory + sine_mains) 
    alias_test = sine_respiratory + sine_alias

    impulse = signal.unit_impulse(num_samples)


    """
    Downscaling
    """
    downsample_factor = 2

    # resp_data_lo = signalInterface.downsample(resp_data, downsample_factor)
    # signalInterfaceLowRes = signal_tools.SignalTools(sample_rate//downsample_factor, capture_length)
    # filterInterfaceLowRes = filters.Filters(sample_rate//downsample_factor, capture_length)

    
    
    """
    Applying filters or FFT's
    """

 



    """
    PLAYGROUND
    """
    

    result = filterInterface.bandpass(resp_data, lowcut=0.1, highcut=0.5, order=10, ftype="IIR", plot=False)

    maxima = signal.find_peaks(result.data)
    minima = signal.find_peaks(-result.data)    

    true_extrema = vertical_diff = np.zeros(0)

    plt.plot(result.data)
    for i in maxima:
        for j in i:
               plt.plot(j, result.data[j], "ro")


    for k in minima:
        for l in k:
            plt.plot(l, result.data[l], "ro", color="green")

    extrema = np.append(maxima[0], minima[0])    
    extrema.sort()

    for idx, i in enumerate(extrema):
        if(idx < len(extrema)-1):
            vertical_diff = np.append(vertical_diff, np.abs(result.data[i] - result.data[extrema[idx+1]]))
        else:
            break
    quartile = np.quantile(vertical_diff, .75)
    Q = 0.5 * quartile
    plt.axhline(y=Q, color='green', linestyle='--', label='Threshold')    

    for idx, i in enumerate(vertical_diff):
        if i > Q:
            true_extrema = np.append(true_extrema, idx)

    plt.grid()
    plt.show()

    plt.plot(result.data)
    total_distance = 0
    for idx, i in enumerate(true_extrema):
        if(idx < len(true_extrema)-1):
            x = extrema[int(i)]
            plt.plot(x, result.data[x], 'ro')
            total_distance = total_distance + (extrema[int(true_extrema[idx+1])] - x)
        else:
            break

    mean = total_distance / len(true_extrema)
    print(mean)

    plt.grid()
    plt.show()
    print(colored('\nDone', 'green'))


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print(colored('\nDone, interrupted', 'green'))    
        sys.exit(0)

#TODO Write tests!